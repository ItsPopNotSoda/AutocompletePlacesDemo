@model AddressAutocomplete.Models.Address

@{
    ViewBag.Title = "Create";
}

<h2>Create Address</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="billingAddress">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*<div class="form-group col-md-4">
                <input type="button" id="btn" class="btn btn-info" value="Search" />
            </div>*@
        <div class="form-group">
            <label class="control-label col-md-2">Enter your address</label>
            <div class="col-md-10">
                <input class="form-control" id="autocomplete"
                       type="text" />
            </div>
        </div>
        <div class="form-group">
            @*@Html.LabelFor(model => model.IsBillingAddress, htmlAttributes: new { @class = "control-label col-md-2", @name="IsBillingAddress" })
            <div class="col-md-10">
                <div class="checkbox" onclick="isBillingAddress()">
                    @Html.EditorFor(model => model.IsBillingAddress)
                    @Html.ValidationMessageFor(model => model.IsBillingAddress, "", new { @class = "text-danger" })
                </div>
            </div>*@
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StreetNumber, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.StreetNumber, new { htmlAttributes = new { @class = "form-control" ,  id = "street_number" } } )
                @Html.ValidationMessageFor(model => model.StreetNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StreetName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StreetName, new { htmlAttributes = new { @class = "form-control" , id =  "route"} })
                @Html.ValidationMessageFor(model => model.StreetName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", id  = "locality" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" , id = "postal_code" } })
                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">


                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", id = "administrative_area_level_1" } })
              
                
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" , id = "country" } })
                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

}
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCP7nYf8IDBRbwyHRENWttxzb5zKV2fSI4&libraries=places&callback=initAutocomplete" defer></script>
<script type="text/javascript">
    $(document).ready(function () {


        //***Might be able to set autocomplete = null if we wait longer
        var autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('autocomplete'), { types: ['geocode'] });

        autocomplete.addListener('place_changed', fillInAddress);

        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };
        //function isBillingAddress() {
        //    var checkBox = document.getElementById("IsBillingAddress");
        //    if (checkBox.checked == true) {
        //        document.getElementById(billingAddress2).hidden = false;
        //    } else {
        //        text.style.display = "none";
        //    }

        //}
        function initAutocomplete() {

            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('autocomplete'), { types: ['geocode'] });

            autocomplete.setFields(['address_component']);


            //Populate the address fields based on selection
            alert("127");
            autocomplete.addListener('place_changed', fillInAddress);

        };


        function fillInAddress() {
            //document.fillInAddress = (function () {
            // Get the place details from the autocomplete object.

            var place = autocomplete.getPlace();
         /*   alert("138")*/;
            //for (var component in componentForm) {
            //        document.getElementById(component).value = '';
            //        document.getElementById(component).disabled = false;
            //}

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {

                var addressType = place.address_components[i].types[0];

                if (componentForm[addressType]) {

                    var val = place.address_components[i][componentForm[addressType]];
                  
                  //  for (var j = 0; j < document.getElementsByName.length; j++)
                   //     alert("161");

                    var mappedPropertyid = document.getElementById(addressType).id;
                    //var mappedPropertyName = document.getElementById(addressType).name;

                   // alert(mappedPropertyid);
                  //  alert(mappedPropertyName);

                    if (mappedPropertyid == addressType)
                    {
                        document.getElementById(addressType).value = val;
                    }
    //propertymap
                    // alert(val + " " + addressType);

                    //if (addressType == "street_number") {
                    //    document.getElementById(addressType).value = val;
                    //}

         

                    // document.getElementById(addressType).value = val;
                    //document.getElementsByName("#"+ addressType).val() = val;
                    //if (addressType == "street_number") {
                    //    //  document.getElementById(addressType).value = val;
                    //    document.getElementById('StreetNumber').value = val;
                    //}
                    //if (addressType == "locality") {
                    //    //  document.getElementById(addressType).value = val;
                    //    document.getElementsByName('City').value = val;
                    //}
                }
            }
        };

        $("#btn").click(function () {
            initAutocomplete();
        });


    });
</script>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
