@model AddressAutocomplete.Models.Address

@{
    ViewBag.Title = "Create";
}

<h2>Create Address</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
<div class="row" style="display:flex; flex-wrap: wrap;">

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="column" style="flex:50%;  padding: 0 4px">
        <div class="form-horizontal" id="billingAddress">
            <div class="form-group">
                <label class="control-label col-md-2">Enter your address</label>
                <div class="col-md-10">
                    <input class="form-control" id="autocomplete"
                           type="text" />
                </div>
            </div>
            <div class="form-group">
                @*@Html.LabelFor(model => model.IsBillingAddress, htmlAttributes: new { @class = "control-label col-md-2", @name="IsBillingAddress" })
                    <div class="col-md-10">
                        <div class="checkbox" onclick="isBillingAddress()">
                            @Html.EditorFor(model => model.IsBillingAddress)
                            @Html.ValidationMessageFor(model => model.IsBillingAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.StreetNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StreetNumber, new { htmlAttributes = new { @class = "form-control", id = "street_number" } })
                    @Html.ValidationMessageFor(model => model.StreetNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StreetName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StreetName, new { htmlAttributes = new { @class = "form-control", id = "route" } })
                    @Html.ValidationMessageFor(model => model.StreetName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", id = "locality" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control", id = "postal_code" } })
                    @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">


                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", id = "administrative_area_level_1" } })


                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control", id = "country" } })
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>
    <div class="column" style="flex:50%;   padding: 0 4px">
        <div id="map-canvas" style="height: 500px; width: 500px">
        </div>
    </div>
</div>
        }
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCP7nYf8IDBRbwyHRENWttxzb5zKV2fSI4&libraries=places&callback=initAutocomplete" defer></script>
        <script type="text/javascript">
            $(document).ready(function () {


                //***Might be able to set autocomplete = null if we wait longer
                var autocomplete = new google.maps.places.Autocomplete(
                    document.getElementById('autocomplete'), { types: ['geocode'] });

                autocomplete.addListener('place_changed', fillInAddress);

                var componentForm = {
                    street_number: 'short_name',
                    route: 'long_name',
                    locality: 'long_name',
                    administrative_area_level_1: 'short_name',
                    country: 'long_name',
                    postal_code: 'short_name'
                };
                //function isBillingAddress() {
                //    var checkBox = document.getElementById("IsBillingAddress");
                //    if (checkBox.checked == true) {
                //        document.getElementById(billingAddress2).hidden = false;
                //    } else {
                //        text.style.display = "none";
                //    }

                //}
                function initAutocomplete() {

                    autocomplete = new google.maps.places.Autocomplete(
                        document.getElementById('autocomplete'), { types: ['geocode'] });
                    autocomplete.setFields(['address_component']);
                    autocomplete.addListener('place_changed', fillInAddress);
                };


                function fillInAddress() {
                    var place = autocomplete.getPlace();

                    // Get each component of the address from the place details in order to populate the address fields based on selection 
                    for (var i = 0; i < place.address_components.length; i++) {

                        var addressType = place.address_components[i].types[0];

                        if (componentForm[addressType]) {

                            var val = place.address_components[i][componentForm[addressType]];

                            //The property names coming back from the API are not user friendly (e.g. "street_name"), and I didn't want them as columns in the database,
                            //so I assigned an id in the html attributes to map the property name from the API to the property name in my model
                            var mappedPropertyid = document.getElementById(addressType).id; 

                            if (mappedPropertyid == addressType) {
                                document.getElementById(addressType).value = val;
                            }
                        
                        }
                    }
                    var geocoder = new google.maps.Geocoder();
                    var country = document.getElementById('country').value;
                    var city = document.getElementById('locality').value;
                    var streetNumber = document.getElementById('street_number').value;
                    var route = document.getElementById('route').value;
                    var state = document.getElementById('administrative_area_level_1').value;
                    var zip = document.getElementById('postal_code').value;

                    var com = streetNumber + " " + route + ", " + city + ", " + state + ", " + zip + ", " + country;
                   // alert(com);
                    geocoder.geocode({ 'address': com }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            var x = results[0].geometry.location.lat();
                            var y = results[0].geometry.location.lng();
                            var latlng = new google.maps.LatLng(x, y);
                            var myOptions = {
                                zoom: 8,
                                center: latlng,
                                mapTypeId: google.maps.MapTypeId.ROADMAP
                            };
                            map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);
                            var marker = new google.maps.Marker({
                                position: new google.maps.LatLng(x, y),
                                map: map,
                                title: com
                            });
                            var infowindow = new google.maps.InfoWindow({
                                content: com
                            });
                            infowindow.open(map, marker);
                            google.maps.event.addDomListener(window, 'load');
                        } else {
                            res.innerHTML = "Enter correct Details: " + status;
                        }
                    });
                };

            });
        </script>
        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
